{"version":3,"sources":["src/services/notifier-timer.service.ts"],"names":[],"mappings":";;;;;;;;;;AAGA,qBAA2B,eAAe,CAAC,CAAA;AAO3C;IAoBC;QACC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACrB,CAAC;IAOM,kCAAG,GAAV,UAAY,QAAgB,EAAE,QAAkB;QAC/C,EAAE,CAAC,CAAE,IAAI,CAAC,SAAS,KAAK,CAAE,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAE,CAAC;IACvD,CAAC;IAKM,mCAAI,GAAX;QACC,YAAY,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACpB,CAAC;IAKM,oCAAK,GAAZ;QACC,YAAY,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;IACnD,CAAC;IAtDF;QAAC,iBAAU,EAAE;;4BAAA;IAwDb,2BAAC;AAAD,CAvDA,AAuDC,IAAA;AAvDY,4BAAoB,uBAuDhC,CAAA","file":"src/services/notifier-timer.service.js","sourcesContent":["/**\n * External imports\n */\nimport { Injectable } from '@angular/core';\n\n/**\n * Notifier timer service\n * This service contains all functionality for creating a timer and start / resume / stop it\n */\n@Injectable()\nexport class NotifierTimerService {\n\n\t/**\n\t * Time at this moment (timestamp)\n\t */\n\tprivate now: number;\n\n\t/**\n\t * Remaining timer countdown (timestamp)\n\t */\n\tprivate remaining: number;\n\n\t/**\n\t * Timer ID (timeout token)\n\t */\n\tprivate timerId: number;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.now = 0;\n\t\tthis.remaining = 0;\n\t\tthis.timerId = null;\n\t}\n\n\t/**\n\t * Run (start / resume) the timer\n\t * @param {number}   duration Duration\n\t * @param {Function} callback Callback function\n\t */\n\tpublic run( duration: number, callback: Function ): void {\n\t\tif ( this.remaining === 0 ) {\n\t\t\tthis.remaining = duration;\n\t\t}\n\t\tthis.now = new Date().getTime();\n\t\tthis.timerId = setTimeout( callback, this.remaining );\n\t}\n\n\t/**\n\t * Stop the timer (like ... forever ...)\n\t */\n\tpublic stop(): void {\n\t\tclearTimeout( this.timerId );\n\t\tthis.remaining = 0;\n\t}\n\n\t/**\n\t * Pause the timer\n\t */\n\tpublic pause(): void {\n\t\tclearTimeout( this.timerId );\n\t\tthis.remaining -= new Date().getTime() - this.now;\n\t}\n\n}\n"],"sourceRoot":"/source/"}