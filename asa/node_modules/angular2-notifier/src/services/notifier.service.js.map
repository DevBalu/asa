{"version":3,"sources":["src/services/notifier.service.ts"],"names":[],"mappings":";;;;;;;;;;AAGA,qBACyB,eAAe,CAAC,CAAA;AACzC,mCAAkC,6CAA6C,CAAC,CAAA;AAKhF,4CAAqC,yCAAyC,CAAC,CAAA;AAC/E,sCAA4D,mCAAmC,CAAC,CAAA;AAChG,6CAA2C,8CAA8C,CAAC,CAAA;AAO1F;IAiBC,yBAAoB,cAA8B,EAAE,iBAAoC;QAjBzF,iBAgJC;QA7HC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAM3C,EAAE,CAAC,CAAU,cAAgB,CAAE,iBAAiB,CAAE,CAAC,MAAM,KAAK,CAAE,CAAC,CAAC,CAAC;YAClE,cAAc,CAAC,yBAAyB,CAAE,UAAE,gBAAmC;gBAC9E,KAAI,CAAC,cAAc,CAAE,gBAAgB,CAAE,CAAC;YACzC,CAAC,CAAE,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,cAAc,CAAU,cAAgB,CAAE,iBAAiB,CAAE,CAAE,CAAC,CAAE,CAAE,CAAC;QAC3E,CAAC;IAEF,CAAC;IAQM,gCAAM,GAAb,UAAe,IAAY,EAAE,OAAe;QAC3C,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAE;YACvC,OAAO,EAAE,IAAI,kDAAoB,CAAE,IAAI,EAAE,OAAO,CAAE;YAClD,IAAI,EAAE,4BAAI;SACV,CAAE,CAAC;IACL,CAAC;IAOM,iCAAO,GAAd,UAAgB,OAAe;QAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,SAAS,EAAE,OAAO,CAAE,CAAC;IAC1C,CAAC;IAOM,8BAAI,GAAX,UAAa,OAAe;QAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,MAAM,EAAE,OAAO,CAAE,CAAC;IACvC,CAAC;IAOM,iCAAO,GAAd,UAAgB,OAAe;QAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,SAAS,EAAE,OAAO,CAAE,CAAC;IAC1C,CAAC;IAOM,iCAAO,GAAd,UAAgB,OAAe;QAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,SAAS,EAAE,OAAO,CAAE,CAAC;IAC1C,CAAC;IAOM,+BAAK,GAAZ,UAAc,OAAe;QAC5B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,OAAO,EAAE,OAAO,CAAE,CAAC;IACxC,CAAC;IAMM,kCAAQ,GAAf;QACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAE;YACvC,IAAI,EAAE,iCAAS;SACf,CAAE,CAAC;IACL,CAAC;IAMM,qCAAW,GAAlB;QACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAE;YACvC,IAAI,EAAE,oCAAY;SAClB,CAAE,CAAC;IACL,CAAC;IAMM,qCAAW,GAAlB;QACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAE;YACvC,IAAI,EAAE,oCAAY;SAClB,CAAE,CAAC;IACL,CAAC;IAMO,wCAAc,GAAtB,UAAwB,aAAgC;QAAxD,iBAeC;QAZA,IAAM,aAAa,GAAqB,IAAI,sCAAiB,CAAU,aAAe,CAAE,cAAc,CAAE,CAAE,CAAC;QAG3G,IAAI,CAAC,iBAAiB;aACpB,gBAAgB,CAAE,yDAA0B,CAAE;aAC9C,IAAI,CAAE,UAAE,gBAA8D;YACtE,KAAI,CAAC,iBAAiB,GAAG,aAAa;iBACpC,eAAe,CAA8B,gBAAgB,EAAE,aAAa,CAAC,MAAM,EACnF,aAAa,CAAC,cAAc,CAAE;iBAC9B,QAAQ,CAAC;QACZ,CAAC,CAAE,CAAC;IAEN,CAAC;IA/IF;QAAC,iBAAU,EAAE;;uBAAA;IAiJb,sBAAC;AAAD,CAhJA,AAgJC,IAAA;AAhJY,uBAAe,kBAgJ3B,CAAA","file":"src/services/notifier.service.js","sourcesContent":["/**\n * External imports\n */\nimport { ApplicationRef, ComponentFactory, ComponentRef, ComponentResolver, Injectable,\n\tViewContainerRef } from '@angular/core';\nimport { ViewContainerRef_ } from '@angular/core/src/linker/view_container_ref';\n\n/**\n * Internal imports\n */\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { SHOW, CLEAR_ALL, CLEAR_NEWEST, CLEAR_OLDEST } from './../models/notifier-action.model';\nimport { NotifierContainerComponent } from './../components/notifier-container.component';\n\n/**\n * Notifier service\n * This service works as the public API of this library, and also like a bridge between the components\n */\n@Injectable()\nexport class NotifierService {\n\n\t/**\n\t * Component resolver\n\t */\n\tprivate componentResolver: ComponentResolver;\n\n\t/**\n\t * Notifier component\n\t */\n\tprivate notifierContainer: NotifierContainerComponent;\n\n\t/**\n\t * Constructor\n\t * @param {ApplicationRef}    applicationRef    Application\n\t * @param {ComponentResolver} componentResolver Component resolver\n\t */\n\tpublic constructor( applicationRef: ApplicationRef, componentResolver: ComponentResolver ) {\n\n\t\tthis.componentResolver = componentResolver;\n\n\t\t// Dynamically add our notifier container component into the document, next to the app component\n\t\t// In the case we use this service in the root component, we first need to wait until the bootstrap is done\n\t\t// Inspired by awesome people and their ideas on:\n\t\t// <http://stackoverflow.com/questions/34970778/get-root-component-elementref-or-componentref-angular-2>\n\t\tif ( ( <any> applicationRef )[ '_rootComponents' ].length === 0 ) {\n\t\t\tapplicationRef.registerBootstrapListener( ( rootComponentRef: ComponentRef<any> ) => {\n\t\t\t\tthis.setupComponent( rootComponentRef );\n\t\t\t} );\n\t\t} else {\n\t\t\tthis.setupComponent( ( <any> applicationRef )[ '_rootComponents' ][ 0 ] );\n\t\t}\n\n\t}\n\n\t/**\n\t * Show a notification (the general way)\n\t * @param  {string}       type    Notification type\n\t * @param  {string}       message Notification message\n\t * @return {Promise<any>}         Promise, resolved when finished\n\t */\n\tpublic notify( type: string, message: string ): Promise<any> {\n\t\treturn this.notifierContainer.doAction( {\n\t\t\tpayload: new NotifierNotification( type, message ),\n\t\t\ttype: SHOW\n\t\t} );\n\t}\n\n\t/**\n\t * Show a default notification (the specific way)\n\t * @param  {string}       message Notification message\n\t * @return {Promise<any>}         Promise, resolved when finished\n\t */\n\tpublic default( message: string ): Promise<any> {\n\t\treturn this.notify( 'default', message );\n\t}\n\n\t/**\n\t * Show a info notification (the specific way)\n\t * @param  {string}       message Notification message\n\t * @return {Promise<any>}         Promise, resolved when finished\n\t */\n\tpublic info( message: string ): Promise<any> {\n\t\treturn this.notify( 'info', message );\n\t}\n\n\t/**\n\t * Show a success notification (the specific way)\n\t * @param  {string}       message Notification message\n\t * @return {Promise<any>}         Promise, resolved when finished\n\t */\n\tpublic success( message: string ): Promise<any> {\n\t\treturn this.notify( 'success', message );\n\t}\n\n\t/**\n\t * Show a warning notification (the specific way)\n\t * @param  {string}       message Notification message\n\t * @return {Promise<any>}         Promise, resolved when finished\n\t */\n\tpublic warning( message: string ): Promise<any> {\n\t\treturn this.notify( 'warning', message );\n\t}\n\n\t/**\n\t * Show a error notification (the specific way)\n\t * @param  {string}       message Notification message\n\t * @return {Promise<any>}         Promise, resolved when finished\n\t */\n\tpublic error( message: string ): Promise<any> {\n\t\treturn this.notify( 'error', message );\n\t}\n\n\t/**\n\t * Clear all notifications\n\t * @return {Promise<any>} Promise, resolved when finished\n\t */\n\tpublic clearAll(): Promise<any> {\n\t\treturn this.notifierContainer.doAction( {\n\t\t\ttype: CLEAR_ALL\n\t\t} );\n\t}\n\n\t/**\n\t * Clear the oldest notification\n\t * @return {Promise<any>} Promise, resolved when finished\n\t */\n\tpublic clearOldest(): Promise<any> {\n\t\treturn this.notifierContainer.doAction( {\n\t\t\ttype: CLEAR_OLDEST\n\t\t} );\n\t}\n\n\t/**\n\t * Clear then newest notification\n\t * @return {Promise<any>} Promise, resolved when finished\n\t */\n\tpublic clearNewest(): Promise<any> {\n\t\treturn this.notifierContainer.doAction( {\n\t\t\ttype: CLEAR_NEWEST\n\t\t} );\n\t}\n\n\t/**\n\t * Setup the notifier container component\n\t * @param {ComponentRef<any>} rootComponent Root component of the application\n\t */\n\tprivate setupComponent( rootComponent: ComponentRef<any> ): void {\n\n\t\t// Create the view container manually\n\t\tconst rootContainer: ViewContainerRef = new ViewContainerRef_( ( <any> rootComponent )[ '_hostElement' ] );\n\n\t\t// Inject our component into the document, save its reference for later\n\t\tthis.componentResolver\n\t\t\t.resolveComponent( NotifierContainerComponent )\n\t\t\t.then( ( componentFactory: ComponentFactory<NotifierContainerComponent> ) => {\n\t\t\t\tthis.notifierContainer = rootContainer\n\t\t\t\t\t.createComponent<NotifierContainerComponent>( componentFactory, rootContainer.length,\n\t\t\t\t\t\trootContainer.parentInjector )\n\t\t\t\t\t.instance;\n\t\t\t} );\n\n\t}\n\n}\n"],"sourceRoot":"/source/"}