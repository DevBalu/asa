"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('@angular/core');
var notifier_global_config_model_1 = require('./../models/notifier-global-config.model');
var notifier_action_model_1 = require('./../models/notifier-action.model');
var notifier_animations_service_1 = require('./../services/notifier-animations.service');
var notifier_notification_component_1 = require('./notifier-notification.component');
var NotifierContainerComponent = (function () {
    function NotifierContainerComponent(notifierGlobalConfig) {
        this.config = notifierGlobalConfig === null ? new notifier_global_config_model_1.NotifierGlobalConfig() : notifierGlobalConfig;
        this.notifications = [];
        this.queue = {
            actions: [],
            inProgress: false
        };
        this.tempNotificationResolver = null;
    }
    NotifierContainerComponent.prototype.doAction = function (action) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            action.resolve = resolve;
            _this.queue.actions.push(action);
            _this.doNextActionInQueue();
        });
    };
    NotifierContainerComponent.prototype.doNextActionInQueue = function () {
        var _this = this;
        if (this.queue.inProgress) {
            return;
        }
        else if (this.queue.actions.length > 0) {
            this.queue.inProgress = true;
            var action_1 = this.queue.actions.shift();
            switch (action_1.type) {
                case notifier_action_model_1.SHOW:
                    this.addNotification(action_1.payload)
                        .then(function () {
                        action_1.resolve();
                        _this.queue.inProgress = false;
                        _this.doNextActionInQueue();
                    });
                    break;
                case notifier_action_model_1.HIDE:
                    this.removeNotification(action_1.payload)
                        .then(function () {
                        action_1.resolve();
                        _this.queue.inProgress = false;
                        _this.doNextActionInQueue();
                    });
                    break;
                case notifier_action_model_1.CLEAR_ALL:
                    if (this.notifications.length === 0) {
                        action_1.resolve();
                        this.queue.inProgress = false;
                        this.doNextActionInQueue();
                    }
                    else {
                        this.removeAllNotifications()
                            .then(function () {
                            action_1.resolve();
                            _this.queue.inProgress = false;
                            _this.doNextActionInQueue();
                        });
                    }
                    break;
                case notifier_action_model_1.CLEAR_OLDEST:
                    if (this.notifications.length === 0) {
                        action_1.resolve();
                        this.queue.inProgress = false;
                        this.doNextActionInQueue();
                    }
                    else {
                        this.removeNotification(this.notifications[0].component)
                            .then(function () {
                            action_1.resolve();
                            _this.queue.inProgress = false;
                            _this.doNextActionInQueue();
                        });
                    }
                    break;
                case notifier_action_model_1.CLEAR_NEWEST:
                    if (this.notifications.length === 0) {
                        action_1.resolve();
                        this.queue.inProgress = false;
                        this.doNextActionInQueue();
                    }
                    else {
                        this.removeNotification(this.notifications[this.notifications.length - 1].component)
                            .then(function () {
                            action_1.resolve();
                            _this.queue.inProgress = false;
                            _this.doNextActionInQueue();
                        });
                    }
                    break;
            }
        }
    };
    NotifierContainerComponent.prototype.addNotification = function (notification) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.notifications.push(notification);
            _this.tempNotificationResolver = resolve;
        });
    };
    NotifierContainerComponent.prototype.removeAllNotifications = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.config.animations.enabled && _this.config.animations.clear.offset !== false
                && _this.config.animations.clear.offset > 0) {
                var _loop_1 = function(i) {
                    var animationOffset = _this.config.position.vertical.position === 'top'
                        ? _this.config.animations.clear.offset * (_this.notifications.length - i)
                        : _this.config.animations.clear.offset * i;
                    setTimeout(function () {
                        _this.notifications[i].component.hide().then(function () {
                            if (_this.config.position.vertical.position === 'top') {
                                if (i === 0) {
                                    _this.notifications = [];
                                    resolve();
                                }
                            }
                            else {
                                if (i === _this.notifications.length - 1) {
                                    _this.notifications = [];
                                    resolve();
                                }
                            }
                        });
                    }, animationOffset);
                };
                for (var i = _this.notifications.length - 1; i >= 0; i--) {
                    _loop_1(i);
                }
            }
            else {
                var animations = [];
                for (var i = _this.notifications.length - 1; i >= 0; i--) {
                    animations.push(_this.notifications[i].component.hide());
                }
                Promise.all(animations).then(function () {
                    _this.notifications = [];
                    resolve();
                });
            }
        });
    };
    NotifierContainerComponent.prototype.removeNotification = function (notificationComponent) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.notifications.length > 1) {
                _this.animateOutNotification(notificationComponent);
                if (_this.config.animations.enabled) {
                    setTimeout(function () {
                        var index = _this.getNotificationIndex(notificationComponent);
                        var notifications = _this.notifications.slice(0, index);
                        _this.animateShiftNotifications(notifications, notificationComponent.getHeight(), false)
                            .then(function () {
                            resolve();
                        });
                    }, Math.round(_this.config.animations.show.duration / 5));
                }
                else {
                    var index = _this.getNotificationIndex(notificationComponent);
                    var notifications = _this.notifications.slice(0, index);
                    _this.animateShiftNotifications(notifications, notificationComponent.getHeight(), false)
                        .then(function () {
                        resolve();
                    });
                }
            }
            else {
                _this.animateOutNotification(notificationComponent).then(function () {
                    resolve();
                });
            }
        });
    };
    NotifierContainerComponent.prototype.animateOutNotification = function (notificationComponent) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            notificationComponent.hide().then(function () {
                _this.notifications = _this.notifications.filter(function (currentNotification) {
                    return currentNotification.component !== notificationComponent;
                });
                resolve();
            });
        });
    };
    NotifierContainerComponent.prototype.animateShiftNotifications = function (notifications, value, toMakePlace) {
        var animations = [];
        for (var _i = 0, notifications_1 = notifications; _i < notifications_1.length; _i++) {
            var notification = notifications_1[_i];
            animations.push(notification.component.shift(value, toMakePlace));
        }
        return Promise.all(animations);
    };
    NotifierContainerComponent.prototype.getNotificationIndex = function (notificationComponent) {
        return this.notifications.findIndex(function (notification) {
            return notification.component === notificationComponent;
        });
    };
    NotifierContainerComponent.prototype.onCreated = function (notificationComponent) {
        var _this = this;
        this.notifications[this.notifications.length - 1].component = notificationComponent;
        if (this.notifications.length > 1) {
            if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < 2) {
                this.animateOutNotification(this.notifications[0].component).then(function () {
                    notificationComponent.show().then(function () {
                        _this.tempNotificationResolver();
                    });
                });
            }
            else {
                if (this.notifications.length > this.config.behaviour.stacking) {
                    this.animateOutNotification(this.notifications[0].component);
                    var notifications_2 = this.notifications.slice(1, this.notifications.length - 1);
                    setTimeout(function () {
                        _this.animateShiftNotifications(notifications_2, notificationComponent.getHeight(), true);
                    }, Math.round(this.config.animations.show.duration / 5));
                    setTimeout(function () {
                        notificationComponent.show().then(function () {
                            _this.tempNotificationResolver();
                        });
                    }, Math.round(this.config.animations.show.duration / 2.5));
                }
                else {
                    var notifications = this.notifications.slice(0, this.notifications.length - 1);
                    this.animateShiftNotifications(notifications, notificationComponent.getHeight(), true);
                    setTimeout(function () {
                        notificationComponent.show().then(function () {
                            _this.tempNotificationResolver();
                        });
                    }, Math.round(this.config.animations.show.duration / 5));
                }
            }
        }
        else {
            notificationComponent.show().then(function () {
                _this.tempNotificationResolver();
            });
        }
    };
    NotifierContainerComponent.prototype.onDismiss = function (notificationComponent) {
        this.doAction({
            payload: notificationComponent,
            type: notifier_action_model_1.HIDE
        });
    };
    NotifierContainerComponent = __decorate([
        core_1.Component({
            directives: [
                notifier_notification_component_1.NotifierNotificationComponent
            ],
            host: {
                class: 'x-notifier__container'
            },
            providers: [
                notifier_animations_service_1.NotifierAnimationService
            ],
            selector: 'x-notifier-container',
            template: "\n\t\t<ul class=\"x-notifier__container-list\">\n\t\t\t<li *ngFor=\"let notification of notifications\">\n\t\t\t\t<x-notifier-notification\n\t\t\t\t\t[notification]=\"notification\" (created)=\"onCreated( $event )\" (dismiss)=\"onDismiss( $event )\">\n\t\t\t\t</x-notifier-notification>\n\t\t\t</li>\n\t\t</ul>\n\t\t"
        }),
        __param(0, core_1.Optional()), 
        __metadata('design:paramtypes', [notifier_global_config_model_1.NotifierGlobalConfig])
    ], NotifierContainerComponent);
    return NotifierContainerComponent;
}());
exports.NotifierContainerComponent = NotifierContainerComponent;

//# sourceMappingURL=notifier-container.component.js.map
