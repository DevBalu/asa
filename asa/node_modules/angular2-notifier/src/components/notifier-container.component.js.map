{"version":3,"sources":["src/components/notifier-container.component.ts"],"names":[],"mappings":"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","file":"src/components/notifier-container.component.js","sourcesContent":["/**\n * External imports\n */\nimport { Component, Optional } from '@angular/core';\n\n/**\n * Internal imports\n */\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { NotifierGlobalConfig } from './../models/notifier-global-config.model';\nimport { NotifierAction, SHOW, HIDE, CLEAR_ALL, CLEAR_NEWEST, CLEAR_OLDEST } from './../models/notifier-action.model';\nimport { NotifierAnimationService } from './../services/notifier-animations.service';\nimport { NotifierNotificationComponent } from './notifier-notification.component';\n\n/**\n * Notifier container component\n * This component manages all notifications asynchonously\n */\n@Component( {\n\tdirectives: [\n\t\tNotifierNotificationComponent\n\t],\n\thost: {\n\t\tclass: 'x-notifier__container'\n\t},\n\tproviders: [\n\t\tNotifierAnimationService\n\t],\n\tselector: 'x-notifier-container',\n\ttemplate: `\n\t\t<ul class=\"x-notifier__container-list\">\n\t\t\t<li *ngFor=\"let notification of notifications\">\n\t\t\t\t<x-notifier-notification\n\t\t\t\t\t[notification]=\"notification\" (created)=\"onCreated( $event )\" (dismiss)=\"onDismiss( $event )\">\n\t\t\t\t</x-notifier-notification>\n\t\t\t</li>\n\t\t</ul>\n\t\t`\n} )\nexport class NotifierContainerComponent {\n\n\t/**\n\t * Global notifier config\n\t */\n\tprivate config: NotifierGlobalConfig;\n\n\t/**\n\t * List of currently opened notifications\n\t */\n\tprivate notifications: Array<NotifierNotification>;\n\n\t/**\n\t * Action queue, enables the processing of actions synchonously\n\t */\n\tprivate queue: {\n\n\t\t/**\n\t\t * List of unfinished actions\n\t\t */\n\t\tactions: Array<NotifierAction>;\n\n\t\t/**\n\t\t * Progress flag, prevents that multiple actions will be process at the same time\n\t\t */\n\t\tinProgress: boolean;\n\n\t};\n\n\t/**\n\t * Promise resolve function, when adding a notification (special case)\n\t */\n\tprivate tempNotificationResolver: Function;\n\n\t/**\n\t * Constructor\n\t * @param {NotifierGlobalConfig} notifierGlobalConfig Global notifier configuration\n\t */\n\tpublic constructor( @Optional() notifierGlobalConfig: NotifierGlobalConfig ) {\n\t\tthis.config = notifierGlobalConfig === null ? new NotifierGlobalConfig() : notifierGlobalConfig;\n\t\tthis.notifications = [];\n\t\tthis.queue = {\n\t\t\tactions: [],\n\t\t\tinProgress: false\n\t\t};\n\t\tthis.tempNotificationResolver = null;\n\t}\n\n\t/**\n\t * Run an action; this is the one and only entry point of this component\n\t * @param  {NotifierAction} action Action\n\t * @return {Promise<any>}          Promise, resolved when finished\n\t */\n\tpublic doAction( action: NotifierAction ): Promise<any> {\n\t\treturn new Promise<any>( ( resolve: Function, reject: Function ) => {\n\t\t\taction.resolve = resolve;\n\t\t\tthis.queue.actions.push( action );\n\t\t\tthis.doNextActionInQueue();\n\t\t} );\n\t}\n\n\t/**\n\t * Continue with the next action in the queue\n\t */\n\tprivate doNextActionInQueue(): void {\n\n\t\t// Check if we're already working on some action within the queue\n\t\tif ( this.queue.inProgress ) {\n\t\t\treturn; // We have only one worker for our queue\n\t\t} else if ( this.queue.actions.length > 0 ) {\n\n\t\t\tthis.queue.inProgress = true;\n\t\t\tconst action: NotifierAction = this.queue.actions.shift();\n\t\t\tswitch ( action.type ) {\n\n\t\t\t\t// Show a new notification\n\t\t\t\tcase SHOW:\n\t\t\t\t\tthis.addNotification( action.payload )\n\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\taction.resolve(); // DONE\n\t\t\t\t\t\t\tthis.queue.inProgress = false;\n\t\t\t\t\t\t\tthis.doNextActionInQueue(); // Recursion ...\n\t\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Hide an existing notification\n\t\t\t\tcase HIDE:\n\t\t\t\t\tthis.removeNotification( action.payload )\n\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\taction.resolve(); // DONE\n\t\t\t\t\t\t\tthis.queue.inProgress = false;\n\t\t\t\t\t\t\tthis.doNextActionInQueue(); // Recursion ...\n\t\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Clear all notifications\n\t\t\t\tcase CLEAR_ALL:\n\t\t\t\t\tif ( this.notifications.length === 0 ) {\n\t\t\t\t\t\taction.resolve(); // DONE\n\t\t\t\t\t\tthis.queue.inProgress = false;\n\t\t\t\t\t\tthis.doNextActionInQueue(); // Recursion ...\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.removeAllNotifications()\n\t\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\t\taction.resolve(); // DONE\n\t\t\t\t\t\t\t\tthis.queue.inProgress = false;\n\t\t\t\t\t\t\t\tthis.doNextActionInQueue(); // Recursion ...\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Clear all notifications\n\t\t\t\tcase CLEAR_OLDEST:\n\t\t\t\t\tif ( this.notifications.length === 0 ) {\n\t\t\t\t\t\taction.resolve(); // DONE\n\t\t\t\t\t\tthis.queue.inProgress = false;\n\t\t\t\t\t\tthis.doNextActionInQueue(); // Recursion ...\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.removeNotification( this.notifications[ 0 ].component )\n\t\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\t\taction.resolve(); // DONE\n\t\t\t\t\t\t\t\tthis.queue.inProgress = false;\n\t\t\t\t\t\t\t\tthis.doNextActionInQueue(); // Recursion ...\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Clear all notifications\n\t\t\t\tcase CLEAR_NEWEST:\n\t\t\t\t\tif ( this.notifications.length === 0 ) {\n\t\t\t\t\t\taction.resolve(); // DONE\n\t\t\t\t\t\tthis.queue.inProgress = false;\n\t\t\t\t\t\tthis.doNextActionInQueue(); // Recursion ...\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.removeNotification( this.notifications[ this.notifications.length - 1 ].component )\n\t\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\t\taction.resolve(); // DONE\n\t\t\t\t\t\t\t\tthis.queue.inProgress = false;\n\t\t\t\t\t\t\t\tthis.doNextActionInQueue(); // Recursion ...\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Add a new notification\n\t * @param  {NotifierNotification} notification Notification\n\t * @return {Promise<any>}                      Promise, resolved when finished\n\t */\n\tprivate addNotification( notification: NotifierNotification ): Promise<any> {\n\t\treturn new Promise<any>( ( resolve: Function, reject: Function ) => {\n\t\t\tthis.notifications.push( notification );\n\t\t\tthis.tempNotificationResolver = resolve;\n\t\t} );\n\t}\n\n\t/**\n\t * Remove all notifications\n\t * @return {Promise<any>} Promise, resolved when finished\n\t */\n\tprivate removeAllNotifications(): Promise<any> {\n\t\treturn new Promise<any>( ( resolve: Function, reject: Function ) => {\n\n\t\t\t// Decision: Remove them with animations / without animations?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.clear.offset !== false\n\t\t\t\t&& this.config.animations.clear.offset > 0 ) {\n\n\t\t\t\t// Hide all notifications, depending on vertical position and animation offset\n\t\t\t\tfor ( let i: number = this.notifications.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tlet animationOffset: number = this.config.position.vertical.position === 'top'\n\t\t\t\t\t\t? this.config.animations.clear.offset as number * ( this.notifications.length - i )\n\t\t\t\t\t\t: this.config.animations.clear.offset as number * i;\n\t\t\t\t\tsetTimeout( () => { // Note: Promise.all() and setTimeout() hate each other ;)\n\t\t\t\t\t\tthis.notifications[ i ].component.hide().then( () => {\n\n\t\t\t\t\t\t\t// Remove all notifications when the last one got animated out\n\t\t\t\t\t\t\tif ( this.config.position.vertical.position === 'top' ) {\n\t\t\t\t\t\t\t\tif ( i === 0 ) {\n\t\t\t\t\t\t\t\t\tthis.notifications = []; // Burn them ... muhaha ...\n\t\t\t\t\t\t\t\t\tresolve(); // DONE\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ( i === this.notifications.length - 1 ) {\n\t\t\t\t\t\t\t\t\tthis.notifications = []; // Burn them ... muhaha ...\n\t\t\t\t\t\t\t\t\tresolve(); // DONE\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\t\t\t\t\t}, animationOffset );\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Hide all notifications, all at the same time\n\t\t\t\tlet animations: Array<Promise<any>> = [];\n\t\t\t\tfor ( let i: number = this.notifications.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tanimations.push( this.notifications[ i ].component.hide() );\n\t\t\t\t}\n\t\t\t\tPromise.all( animations ).then( () => {\n\t\t\t\t\tthis.notifications = []; // Burn them ... muhaha ...\n\t\t\t\t\tresolve(); // DONE\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\t}\n\n\t/**\n\t * Remove one notification\n\t * @param  {NotifierNotificationComponent} notificationComponent Notification component\n\t * @return {Promise<any>}                                        Promise, resolved when finished\n\t */\n\tprivate removeNotification( notificationComponent: NotifierNotificationComponent ): Promise<any> {\n\t\treturn new Promise<any>( ( resolve: Function, reject: Function ) => {\n\n\t\t\t// Decision: Shift other notifications before hiding our one / just hide our notification?\n\t\t\tif ( this.notifications.length > 1 ) {\n\t\t\t\tthis.animateOutNotification( notificationComponent );\n\t\t\t\tif ( this.config.animations.enabled ) {\n\t\t\t\t\tsetTimeout( () => { // Animation overlap\n\t\t\t\t\t\tlet index: number = this.getNotificationIndex( notificationComponent );\n\t\t\t\t\t\tlet notifications: Array<NotifierNotification> = this.notifications.slice( 0, index );\n\t\t\t\t\t\tthis.animateShiftNotifications( notifications, notificationComponent.getHeight(), false )\n\t\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\t\tresolve(); // DONE\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t}, Math.round( this.config.animations.show.duration / 5 ) );\n\t\t\t\t} else {\n\t\t\t\t\tlet index: number = this.getNotificationIndex( notificationComponent );\n\t\t\t\t\tlet notifications: Array<NotifierNotification> = this.notifications.slice( 0, index );\n\t\t\t\t\tthis.animateShiftNotifications( notifications, notificationComponent.getHeight(), false )\n\t\t\t\t\t\t.then( () => {\n\t\t\t\t\t\t\tresolve(); // DONE\n\t\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.animateOutNotification( notificationComponent ).then( () => {\n\t\t\t\t\tresolve(); // DONE\n\t\t\t\t} );\n\t\t\t}\n\n\t\t} );\n\t}\n\n\t/**\n\t * Dismiss one notification\n\t * @param  {NotifierNotificationComponent} notificationComponent Notification component\n\t * @return {Promise<any>}                                        Promise, resolved when finished\n\t */\n\tprivate animateOutNotification( notificationComponent: NotifierNotificationComponent ): Promise<any> {\n\t\treturn new Promise<any>( ( resolve: Function, reject: Function ) => {\n\t\t\tnotificationComponent.hide().then( () => {\n\t\t\t\tthis.notifications = this.notifications.filter( ( currentNotification: NotifierNotification ) => {\n\t\t\t\t\treturn currentNotification.component !== notificationComponent;\n\t\t\t\t} );\n\t\t\t\tresolve(); // DONE\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Shift multiple notifications\n\t * @param {Array<NotifierNotification>} notifications List of notifications\n\t * @param {number}                      value         Shift value / distance\n\t * @param {boolean}                     toMakePlace   Shift direction flag\n\t */\n\tprivate animateShiftNotifications( notifications: Array<NotifierNotification>, value: number,\n\t\ttoMakePlace: boolean ): Promise<any> {\n\t\tlet animations: Array<Promise<any>> = [];\n\t\tfor ( let notification of notifications ) {\n\t\t\tanimations.push( notification.component.shift( value, toMakePlace ) );\n\t\t}\n\t\treturn Promise.all( animations ); // DONE\n\t}\n\n\t/**\n\t * Find a notification in the notification list, by providing its notification component\n\t * @param  {NotifierNotificationComponent} notificationComponent Notification component\n\t * @return {number}                                              Index (in our case will always be there)\n\t */\n\tprivate getNotificationIndex( notificationComponent: NotifierNotificationComponent ): number {\n\t\treturn this.notifications.findIndex( ( notification: NotifierNotification ) => {\n\t\t\treturn notification.component === notificationComponent;\n\t\t} );\n\t}\n\n\t/* tslint:disable:no-unused-variable - because the functions are only called by the template / annotation */\n\n\t/**\n\t * Event handler, gets called when the notification component has been initialized\n\t * @param {NotifierNotificationComponent} notificationComponent Notification component\n\t */\n\tprivate onCreated( notificationComponent: NotifierNotificationComponent ): void {\n\n\t\t// Save our notification component reference\n\t\tthis.notifications[ this.notifications.length - 1 ].component = notificationComponent;\n\n\t\t// Decision: First notification?\n\t\tif ( this.notifications.length > 1 ) {\n\n\t\t\t// Decision: Stacking enabled?\n\t\t\tif ( this.config.behaviour.stacking === false || this.config.behaviour.stacking < 2 ) {\n\n\t\t\t\t// Hide the oldest notification, then show the new one\n\t\t\t\tthis.animateOutNotification( this.notifications[ 0 ].component ).then( () => {\n\t\t\t\t\tnotificationComponent.show().then( () => {\n\t\t\t\t\t\tthis.tempNotificationResolver();\n\t\t\t\t\t} );\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\t// Decision: Too many notifications opened?\n\t\t\t\tif ( this.notifications.length > this.config.behaviour.stacking ) {\n\n\t\t\t\t\t// Hide the oldest notification, shift other notifications, show our new notification\n\t\t\t\t\tthis.animateOutNotification( this.notifications[ 0 ].component );\n\t\t\t\t\tlet notifications: Array<NotifierNotification> =\n\t\t\t\t\t\tthis.notifications.slice( 1, this.notifications.length - 1 );\n\t\t\t\t\tsetTimeout( () => { // Animation overlap\n\t\t\t\t\t\tthis.animateShiftNotifications( notifications, notificationComponent.getHeight(), true );\n\t\t\t\t\t}, Math.round( this.config.animations.show.duration / 5 ) );\n\t\t\t\t\tsetTimeout( () => { // Animation overlap\n\t\t\t\t\t\tnotificationComponent.show().then( () => {\n\t\t\t\t\t\t\tthis.tempNotificationResolver();\n\t\t\t\t\t\t} );\n\t\t\t\t\t}, Math.round( this.config.animations.show.duration / 2.5 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Shift other notifications, show our new notification\n\t\t\t\t\tlet notifications: Array<NotifierNotification> =\n\t\t\t\t\t\tthis.notifications.slice( 0, this.notifications.length - 1 );\n\t\t\t\t\tthis.animateShiftNotifications( notifications, notificationComponent.getHeight(), true );\n\t\t\t\t\tsetTimeout( () => { // Animation overlap\n\t\t\t\t\t\tnotificationComponent.show().then( () => {\n\t\t\t\t\t\t\tthis.tempNotificationResolver();\n\t\t\t\t\t\t} );\n\t\t\t\t\t}, Math.round( this.config.animations.show.duration / 5 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tnotificationComponent.show().then( () => {\n\t\t\t\tthis.tempNotificationResolver();\n\t\t\t} );\n\t\t}\n\n\t}\n\n\t/**\n\t * Event handler, gets called when the notification component should be dismissed\n\t * @param {NotifierNotificationComponent} notificationComponent Notification component\n\t */\n\tprivate onDismiss( notificationComponent: NotifierNotificationComponent ): void {\n\t\tthis.doAction( {\n\t\t\tpayload: notificationComponent,\n\t\t\ttype: HIDE\n\t\t} );\n\t}\n\n\t/* tslint:enable:no-unused-variable */\n\n}\n"],"sourceRoot":"/source/"}